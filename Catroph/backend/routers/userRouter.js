import express from 'express';
import User from '../models/userModel.js';
import data from '../data.js';
import bcrypt from 'bcryptjs';
import { isAdmin, isAuth } from '../utils.js';
// middleware for handling exceptions inside of async express 
// routes and passing them to your express error handlers
import expressAsyncHandler from 'express-async-handler';
import { generateToken } from '../utils.js';

const userRouter = express.Router();

userRouter.get("/seed", expressAsyncHandler(async(req,res) => {
    // Populate database
    const createdUsers = await User.insertMany(data.users);
    res.send({ createdUsers });
}));

userRouter.get("/", isAuth, isAdmin, expressAsyncHandler(async (req, res) => {
    const users = await User.find({});
    res.send(users);
}));

userRouter.get("/top-sellers", expressAsyncHandler(async (req, res) => {
    // Finds all users in the database that are sellers then sort
    // them in descending order by their rating
    // and then return the first five users
    const topSellers = await User.find({ isSeller: true }).sort({ "seller.rating": -1 }).limit(5);
    res.send(topSellers); 
}))

userRouter.post("/signin", expressAsyncHandler(async (req, res) => {
    // Sends an Ajax request to check the user credential in the database
    const user = await User.findOne({ email: req.body.email});

    // Checks whether a user with the indicated email exist and then autenticate them
    if(user) {
        // Checks the hash password from the request with the hash password in the database
        if(bcrypt.compareSync(req.body.password, user.password)) {
            res.send({
                _id: user._id,
                name: user.name,
                email: user.email,
                isAdmin: user.isAdmin,
                isSeller: user.isSeller,
                // This token is generated by json web token(jwt) go to backend/utils.js for more details
                token: generateToken(user),
            });
            return;
        }
    }
    // Sends a message to the user, notifying them that there credentials are incorrect
    res.status(401).send({ message: "Invalid email or password" });
}));

userRouter.post("/register", expressAsyncHandler(async (req, res) => {
        const user = new User({ 
            name: req.body.name, 
            email: req.body.email,
            isSeller: req.body.isSeller,
            password: bcrypt.hashSync(req.body.password, 8),
        });

        const createdUser = await user.save();
        res.send({
            _id: createdUser._id,
            name: createdUser.name,
            email: createdUser.email,
            isSeller: createdUser.isSeller,
            isAdmin: createdUser.isAdmin,
            token: generateToken(createdUser)
        });
    })
);

userRouter.put("/profile", isAuth, expressAsyncHandler(async (req, res) => {
    const user = await User.findById(req.user._id);

    if(user) {
        user.name = req.body.name || user.name;
        user.email = req.body.email || user.email;

        if(user.isSeller && user.seller) {
            user.seller.sellerName = req.body.sellerName || user.seller.sellerName;
            user.seller.sellerLogo = req.body.sellerLogo || user.seller.sellerLogo;
            user.seller.sellerSlogan = req.body.sellerSlogan || user.seller.sellerSlogan;
        }

        if(req.body.password)
            user.password = bcrypt.hashSync(req.body.password, 8);

        const updatedUser = await user.save();
        res.send({
            _id: updatedUser._id,
            name: updatedUser.name,
            email: updatedUser.email,
            isAdmin: updatedUser.isAdmin,
            isSeller: updatedUser.isSeller,
            token: generateToken(updatedUser),
        });
    }
}));

userRouter.get("/:id", expressAsyncHandler(async (req, res) => {
    const user = await User.findById(req.params.id);

    if(user)
        res.send(user);
    else
        res.status(404).send({ message: "User Not Found" });
}));

userRouter.delete("/:id", isAuth, isAdmin, expressAsyncHandler(async (req, res) => {
    const user = await User.findById(req.params.id);

    if(user) {
        if(user.email === "chevanogordon@gmail.com") {
            res.status(400).send({ message: "Cannot Delete Admin"});
            return;
        }

        const deletedUser = await user.remove();
        res.send({ message: "User Deleted", user: deletedUser });
    }
    else
        res.status(404).send({ message: "User Not Found"});
}));

userRouter.put("/:id", isAuth, isAdmin, expressAsyncHandler(async (req,res) => {
    const user = await User.findById(req.params.id);

    if(user) {
        user.name = req.body.name || user.name;
        user.email = req.body.email || user.email;
        user.isSeller = req.body.isSeller === user.isSeller ? user.isSeller : req.body.isSeller;

        if(req.body.isAdmin !== user.isAdmin && user.email === "chevanogordon@gmail.com") {
            res.status(400).send({ message: "Cannot change Admin privilege for this user"});
            return;
        }
    
        user.isAdmin = req.body.isAdmin === user.isAdmin ? user.isAdmin : req.body.isAdmin;

        const updatedUser = await user.save();
        res.send({ message: "User Updated", user: updatedUser});
    }
    else
        res.status(404).send({ message: "User Not Found" });
}))

export default userRouter;

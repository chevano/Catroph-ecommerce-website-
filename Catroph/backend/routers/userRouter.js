import express from 'express';
import User from '../models/userModel.js';
import data from '../data.js';
import bcrypt from 'bcryptjs';
// middleware for handling exceptions inside of async express 
// routes and passing them to your express error handlers
import expressAsyncHandler from 'express-async-handler';
import { generateToken } from '../utils.js';

const userRouter = express.Router();

userRouter.get("/seed", expressAsyncHandler(async(req,res) => {
    // Populate database
    const createdUsers = await User.insertMany(data.users);
    res.send({ createdUsers });
}));

userRouter.post("/signin", expressAsyncHandler(async (req, res) => {
    // Sends an Ajax request to check the user credential in the database
    const user = await User.findOne({ email: req.body.email});

    // Checks whether a user with the indicated email exist and then autenticate them
    if(user) {
        // Checks the hash password from the request with the hash password in the database
        if(bcrypt.compareSync(req.body.password, user.password)) {
            res.send({
                _id: user._id,
                name: user.name,
                email: user.email,
                isAdmin: user.isAdmin,
                // This token is generated by json web token(jwt) go to backend/utils.js for more details
                token: generateToken(user),
            });
            return;
        }
    }
    // Sends a message to the user, notifying them that there credentials are incorrect
    res.status(401).send({ message: "Invalid email or password" });
}));

userRouter.post("/register", expressAsyncHandler(async (req, res) => {
        const user = new User({ 
            name: req.body.name, 
            email: req.body.email,
            password: bcrypt.hashSync(req.body.password, 8),
        });

        const createdUser = await user.save();
        res.send({
            _id: createdUser._id,
            name: createdUser.name,
            email: createdUser.email,
            isAdmin: createdUser.isAdmin,
            token: generateToken(createdUser)
        });
    })
);

export default userRouter;